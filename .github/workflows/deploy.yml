name: Deploy ke cPanel

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout kode
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, zip, exif, pcntl, gd, mysqli, pdo_mysql
          tools: composer:v2

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: '8.0'
          mysql database: 'presensi_karyawan'
          mysql user: 'laravel'
          mysql password: 'laravel'
          mysql root password: 'root'
          # Meningkatkan max_allowed_packet dan wait_timeout untuk mencegah timeout
          mysql config: |
            max_allowed_packet=128M
            wait_timeout=3600
            interactive_timeout=3600

      - name: Validasi composer.json dan composer.lock
        run: composer validate --strict

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Siapkan .env sementara untuk composer install
        run: |
          echo "APP_KEY=base64:$(openssl rand -base64 32)" > .env
          echo "APP_ENV=testing" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=:memory:" >> .env
          mkdir -p database
          touch database/database.sqlite

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-scripts

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: 'npm'

      - name: Persiapan lingkungan Node.js
        run: |
          node --version
          npm --version
          npm install -g vite

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build assets
        run: NODE_ENV=production npm run build-ci
        continue-on-error: true
        
      - name: Build alternatif jika Vite gagal
        run: |
          if [ ! -d "public/build" ]; then
            echo "Vite build gagal, mencoba metode alternatif..."
            mkdir -p public/build
            cp -r resources/css public/build/
            cp -r resources/js public/build/
            echo '{"files":{"resources/css/app.css":{"file":"assets/app.css"},"resources/js/app.js":{"file":"assets/app.js"}}}' > public/build/manifest.json
            echo "Build alternatif selesai"
          else
            echo "Build Vite berhasil, melanjutkan..."
          fi

      - name: Menjalankan Laravel commands
        run: |
          php artisan key:generate
          php artisan config:cache
          php artisan route:cache
          php artisan package:discover --ansi

      - name: Generate .env file lengkap
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          # Pastikan konfigurasi database tetap benar untuk GitHub Actions
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=presensi_karyawan" >> .env
          echo "DB_USERNAME=laravel" >> .env
          echo "DB_PASSWORD=laravel" >> .env

      - name: Migrasi Database dan Optimasi Laravel
        run: |
          php artisan migrate --force
          php artisan config:clear
          php artisan cache:clear
          php artisan route:cache
          php artisan view:cache
          
      - name: Generate .env file untuk produksi
        run: |
          # Buat .env file untuk cPanel
          echo "${{ secrets.ENV_FILE }}" > .env
          # Ganti konfigurasi database untuk produksi
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=abdinega_abdira" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

      - name: Deploy ke cPanel
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_ROOT_DIR }}/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            tests/**
            .github/**
            .env.example
            phpunit.xml
            README.md
